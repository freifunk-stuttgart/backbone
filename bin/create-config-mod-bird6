#!/bin/bash 
bird6_create_host () {
  local host=$1
  ROUTERID=$(awk -F';' '$1 ~ /^[ \t]*'$host'$/ {a=$4} END {print a}' ../conf/bgp_lines)
  BGP_AS=$(awk -F';' '$1 ~ /^[ \t]*'$host'$/ {a=$3} END {print a}' ../conf/bgp_lines)
  if [ x"$ROUTERID" == x ]; then
    echo "Router ID undefined for $host in ../conf/bgp_lines"
    exit 2
  fi
  if [ x"$BGP_AS" == x ]; then
    echo "BGP AS undefined for $host in ../conf/bgp_lines"
    exit 2
  fi
  cat <<-EOF > ../output/etc/bird/bird6_host_$host.conf
	router id $ROUTERID;
	template bgp t_bgp_local {
	  local as $BGP_AS;
	}
EOF
  get_lines $host | while read line; do
    get_target_line $line | while read target_line; do
      target_as=$(awk -F';' '$2 ~ /^[ \t]*'$target_line'$/ {a=$3} END {gsub(" ","",a); print a}' ../conf/bgp_lines)
      target_host=$(awk -F';' '$2 ~ /^[ \t]*'$target_line'$/ {a=$1} END {gsub(" ","",a); print a}' ../conf/bgp_lines)
      tunnel_tech=$(awk -F';' '$1 ~ /^[ \t]*'$line'$/ && $2 ~ /^[ \t]*'$target_line'$/ { print $3 } $1 ~ /^[ \t]*'$target_line'$/ && $2 ~ /^[ \t]*'$line'$/ { print $3 }' ../conf/tunnels)
      offset=$(get_ip_offset $target_host)
      priority=$(awk -F';' '$1 ~ /^[ \t]*'$line'$/ && $2 ~ /^[ \t]*'$target_line'$/ {print $4}; $1 ~ /^[ \t]*'$target_line'$/ && $2 ~ /^[ \t]*'$line'$/ {print $4}' ../conf/tunnels)
      BGBPATH=$(bgp_path_prepend $BGP_AS $priority)
      BGPLOCALPREF=$(bgp_local_pref $line $target_line)
      if [ "x$tunnel_tech" == "xnone" ]; then
        echo $tunnel_tech: No IPv6 Support >&2
        #SOURCEIP=$(awk  -F';' '$1 ~ /^[ \t]*'$line'$/ { print $3 }' ../conf/vpnservers)
        #awk -F';' '$2 ~ /^[ \t]*'$target_line'$/ { print $4 }' ../conf/lines | while read ip; do
        #  echo "protocol bgp $line$target_line from t_bgp { bfd on; next hop self; neighbor $ip as $target_as; import filter { ${BGPLOCALPREF} if rt_import_ibgp() then accept; else reject; }; export filter { $BGBPATH if rt_export_ibgp() then accept; else reject; }; source address $SOURCEIP;}"
        #done
      elif [ "x$tunnel_tech" == "xopenvpn" ]; then
        echo $tunnel_tech: No IPv6 Support >&2
        # No IPv6 Support
        #awk -F';' '$1 ~ /^[ \t]*'$line'$/ || $1 ~ /^[ \t]*'$target_line'$/ {gsub("\\."," ",$3); print $3}' ../conf/vpnservers | while read ip1 ip2 ip3 ip4; do
        #  echo "protocol bgp $line$target_line from t_bgp { bfd on; next hop self; neighbor $ip1.$ip2.$ip3."$(($ip4+$offset))" as $target_as; import filter { ${BGPLOCALPREF} if rt_import_ibgp() then accept; else reject; }; export filter { $BGBPATH if rt_export_ibgp() then accept; else reject; };}"
        #done
      else
        target=$(get_line_host $target_line)
        source=$(get_line_host $line)
        offset=$(get_network_offset $line $target_line)
        offsetdst=$(get_ip_offset $target)
        offsetsrc=$(get_ip_offset $source)
        basenet4=$(($offset*16))
	localtunip="fd21:711:ffff:ffff::$offset:$offsetsrc:$offsetdst"
	remotetunip="fd21:711:ffff:ffff::$offset:$offsetdst:$offsetsrc"
        echo "protocol bgp $line$target_line from t_bgp { source address $localtunip; bfd on; neighbor $remotetunip as $target_as; import filter { ${BGPLOCALPREF} if rt_import_ibgp() then accept; else reject; }; export filter { $BGBPATH if rt_export_ibgp() then accept; else reject; };}"
      fi
    done
  done > ../output/etc/bird/bird6_location_$host.conf
  cat /etc/iproute2/rt_tables |sed '/^#/d; /^25[345]/d; /^0/d' | while read rt_id rt_name; do
    cat <<-EOF
	table tk_$rt_name;
	protocol kernel k_$rt_name from t_kernel {
	        table tk_$rt_name;
	        kernel table $rt_id;
	        export filter nodefaultroute;
	}
	protocol pipe p_$rt_name from p_kernel {
	        peer table tk_$rt_name;
	}
EOF
  done >> ../output/etc/bird/bird6_location_$host.conf
  echo "update-alternatives --install /etc/bird/bird6_this_location.conf bird6_this_location.conf /etc/bird/bird6_location_${host}.conf 100"
  echo "update-alternatives --install /etc/bird/bird6_this_host.conf bird6_this_host.conf /etc/bird/bird6_host_${host}.conf 100"
}
bird6_create_config () {
  grep -q 'include "/etc/bird/bird6_this_host.conf";' /etc/bird/bird6.conf || echo 'echo "include \"/etc/bird/bird6_this_host.conf\";" >>/etc/bird/bird6.conf'
  grep -q 'include "/etc/bird/bird6_standortvernetzung.conf";' /etc/bird/bird6.conf || echo 'echo "include \"/etc/bird/bird6_standortvernetzung.conf\";" >>/etc/bird/bird6.conf'
  cat <<-EOF > ../output/etc/bird/bird6_standortvernetzung.conf
	protocol device {
	  scan time 10;           # Scan interfaces every 10 seconds
	}
	
	function defaultroute() {
	  return net ~ [ ::/0 ];
	}
	function net_cix() {
	  # CIX Netze, FFS und andere, nicht exportieren
	  return net ~ [ fd21:711:ffff:ffff::/64 ];
	  return false;
	}
	function net_ffs() {
	  # wahrscheinlich nicht releavnt, weil wir nur <=/48 routen
	  return net ~ [ fd21:b4dc:4b00::/40+ ];
	  return false;
	}
	function net_martian() {
	  if net ~ [ 3ffe::/16+, 2001:db8::/32+ ] then return true;
	  if net ~ [ 2001::/32 ] then return false;
	  if net ~ [ 2001::/32+ ] then return true;
	  if net ~ [ 2002::/16 ] then return false;
	  if net ~ [ 2002::/16+, 0000::/8+, fe00::/9+, fe00::/8+ ] then return true;
	  if net ~ [ 2000::/3{3,48}, 0::/0{0,56} ] then return false;
	}
	function rt_import_ibgp() {
	  return true;
	}
	function rt_export_ibgp() {
	  if defaultroute() || net_cix() then return false;
	  if net_martian() then return false;
	  if net_ffs() then return true;
	  return false;
	}
	function rt_import_ebgp() {
	  if net_martian() || net_ffs() then return false;
	  if bgp_path.len > 64 then return false;
	  return true;
	}
	function rt_export_ebgp() {
	  if net_martian() || net_cix() then return false;
	  if ( defined(bgp_path) && bgp_path.len > 32 ) then return false;
	  if net_ffs() then accept;
	  return false;
	}
	filter nodefaultroute {
	  if defaultroute() then reject;
	  else accept;
	}
	filter bgprouting_ffs {
	  krt_metric = 100;       
	  if defaultroute() then { print "Default Route"; reject; }
	  if net_cix() then { print "CIX Route"; reject; }
	  if net_martian() then { reject; }
	  if net_ffs() then { accept; }
	  reject;
	}
	
	protocol kernel {
	  learn;                  # Learn all alien routes from the kernel
	  persist;                # Don't remove routes on bird shutdown
	  scan time 10;           # Scan kernel routing table every 5 seconds
	  import filter nodefaultroute;             # Default is import all
	  # kernel table 99;         # Kernel table to synchronize with (default: main)
	  export filter bgprouting_ffs;
	  device routes;
	}
	protocol direct {
	  interface "br*", "icvpn", "ffsl3";
	  import filter bgprouting_ffs;
	  export filter bgprouting_ffs;
	}
	
	template bgp t_bgp from t_bgp_local {
	  password "reiNgaisah0gee9AiGhoal3eeHooja0eiyejeiphohyaethioKeer8oojedoi1ai";
	  import filter bgprouting_ffs;
	  export filter bgprouting_ffs;
	}
	
	template kernel t_kernel {
	  learn;
	  persist;
	  scan time 10;
	  import filter nodefaultroute;
	  export filter nodefaultroute;
	}
	template pipe p_kernel {
	  import all;
	  export all;
	  mode transparent;
	}
	include "/etc/bird/bird6_this_location.conf";
EOF
}
